///#include <Adafruit_SSD1331.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>
#include <Adafruit_GrayOLED.h>
#include <Adafruit_SPITFT.h>
#include <Adafruit_SPITFT_Macros.h>
#include <gfxfont.h>
#include <SPI.h>
#include <Wire.h>
#include <LiquidCrystal.h>
LiquidCrystal lcd(12, 11, 6, 5, 4, 3);

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 32 // OLED display height, in pixels

//using software SPI
#define OLED_MOSI   9
#define OLED_CLK   10
#define OLED_DC    11
#define OLED_CS    12
#define OLED_RESET 13
Adafruit_SSD1306 display(OLED_MOSI, OLED_CLK, OLED_DC, OLED_RESET, OLED_CS);

//#define BLACK 0x0000
//#define BLUE 0x001F
#define RED 0xF800
//#define GREEN 0x07E0
//#define CYAN 0x07FF
//#define MAGENTA 0xF81F
//#define YELLOW 0xFFE0
//#define WHITE 0xFFFF

#define UP_BUTTON 9
#define DOWN_BUTTON 10

int SCORE = 0;
int PLAYER_SCORE = 0;

/**
 * Made with Marlin Bitmap Converter
 * https://marlinfw.org/tools/u8glib/converter.html
 * This bitmap from the file 'arduinopongTExt.jpg'
 */
const unsigned char arduinoPong[] PROGMEM = {
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xDF,0xE0,0xFC,0x0F,0xEF,0xE7,0x79,0xFD,0xFE,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0x9F,0xEF,0x7D,0xF3,0xE7,0xE7,0x39,0xF9,0xF3,0x9F,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xAF,0xCF,0xB9,0xFD,0xE7,0xE7,0x38,0xF9,0xEF,0xEF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0x6F,0xCF,0xB9,0xFC,0xE7,0xE7,0x39,0xF9,0xCF,0xE7,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0x6F,0xCF,0xB9,0xFE,0xE7,0xE7,0x3B,0x79,0xDF,0xF7,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0x77,0xCF,0xB9,0xFE,0xE7,0xE7,0x39,0xBD,0xDF,0xF7,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFE,0xF7,0xCF,0x79,0xFE,0x67,0xE7,0x39,0xB9,0x9F,0xF3,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFE,0xFF,0xE0,0xF9,0xFE,0x67,0xE7,0x39,0xD9,0x9F,0xF3,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFE,0x13,0xCF,0x79,0xFE,0xE7,0xEF,0x39,0xDD,0xDF,0xF7,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFC,0xFB,0xCF,0x79,0xFE,0xE7,0xEF,0x39,0xED,0xDF,0xF7,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFD,0xFF,0xCF,0xB9,0xFC,0xE7,0xEF,0x39,0xF5,0xCF,0xE7,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFD,0xFD,0xEF,0xB9,0xFD,0xF7,0xEF,0x39,0xF1,0xEF,0xEF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xF9,0xFD,0xCF,0xB9,0xF3,0xFB,0xDF,0x39,0xF9,0xF3,0x9F,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFB,0xFE,0xFF,0xDC,0x1F,0xFC,0x7F,0x7B,0xF9,0xFC,0x7F,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x0F,0xFE,0x3F,0x3F,0xBF,0xC0,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x39,0xFB,0xDF,0x1F,0x9F,0x3F,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3D,0xF7,0xEF,0xDF,0x9E,0x7F,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3C,0xEF,0xF7,0x2F,0x9E,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3C,0xEF,0xF7,0x37,0x9D,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3D,0xCF,0xFB,0xB7,0x9D,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3D,0xCF,0xF3,0x3B,0x9D,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x07,0xCF,0xF3,0x39,0x99,0xF8,0x7F,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3F,0xDF,0xFB,0x3D,0x9D,0xFE,0x7F,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3F,0xEF,0xF7,0xBE,0x9D,0xFE,0x7F,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3F,0xEF,0xF7,0x3E,0x9C,0xFE,0x7F,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3F,0xF7,0xEF,0x3F,0x3E,0xFE,0x7F,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3F,0xFB,0xDF,0x3F,0x9F,0x3E,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x7F,0xFE,0x7F,0x3F,0xBF,0xC1,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
};


byte ball[8] = {
 B00000,
 B00100,
 B01110,
 B11111,
 B01110,
 B00100,
 B00000,
};

byte line [8] = {
 B00000,
 B00100,
 B00100,
 B00100,
 B00100,
 B00100,
 B00000,
};

void setup()
{
  pinMode(UP_BUTTON, INPUT_PULLUP);
  pinMode(DOWN_BUTTON, INPUT_PULLUP); 
   
  display.begin();
  display.fillScreen(BLACK);
  display.drawBitmap(0, 0, arduinoPong, 124, 64, WHITE);
  while(buttonsUnpressed())  
  {
    delay(100);
  }
    unsigned long start = millis();

  delay(1000);
  display.drawRect(0, 0, 120, 60, RED);
}

boolean buttonsUnpressed()
{
  if(digitalRead(DOWN_BUTTON) == HIGH && digitalRead(UP_BUTTON) == HIGH)
  return true;
  else return false;
}

void loop()
{
  

}

void showScore()
{
  
}
void endGame()
{
  
}
